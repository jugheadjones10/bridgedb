#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# This file is part of  BridgeDB, a Tor bridge distribution system.
#
# This script sends an email request for bridges to BridgeDB and then checks if
# it got a response.  The result is written to STATUS_FILE, which is consumed
# by Nagios.  Whenever BridgeDB fails to respond with bridges, we will get a
# Nagios alert.
#
# Run this script via crontab as follows:
#   0 */3 * * * path/to/nagios-email-check $(cat path/to/gmail.key)
#
# :authors: hiro <hiro@torproject.org>
#           see also AUTHORS file
#
# :license: This is Free Software. See LICENSE for license information.


import sys
import smtplib
import time
import imaplib
import email

# Standard Nagios return codes
OK, WARNING, CRITICAL, UNKNOWN = range(4)

ORG_EMAIL = "@gmail.com"
FROM_EMAIL = "test.bridges.torbrowser" + ORG_EMAIL
SMTP_SERVER = "imap.gmail.com"
SMTP_PORT = 993

MESSAGE_FROM = "bridges@torproject.org"
MESSAGE_BODY = "Here are your bridges:"

STATUS_FILE = "/srv/bridges.torproject.org/check/status"


def get_email_response(password):
    """
    Open our Gmail inbox and see if we got a response.
    """

    mail = imaplib.IMAP4_SSL(SMTP_SERVER)
    try:
        mail.login(FROM_EMAIL, password)
    except Exception as e:
        return WARNING, str(e)

    mail.select("INBOX")

    _, data = mail.search(None, "ALL")
    mail_ids = data[0]

    id_list = mail_ids.split()
    if len(id_list) == 0:
        return CRITICAL, "No emails from BridgeDB found"

    return check_email(mail, id_list)


def check_email(mail, id_list):
    """
    Check if we got our expected email response.
    """

    first_email_id = int(str(id_list[0], "utf-8"))
    latest_email_id = int(str(id_list[-1], "utf-8"))

    for i in range(int(latest_email_id), int(first_email_id), -1):
        _, data = mail.fetch(str(i), "(RFC822)")

        # The variable `data` contains the full email object fetched by imaplib
        # <https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.fetch>
        # We are only interested in the response part containing the email
        # envelope.
        print(data)

        for response_part in data:
            if isinstance(response_part, tuple):
                m = str(response_part[1], "utf-8")
                msg = email.message_from_string(m)
                email_from = "{}".format(msg["from"])
                email_body = "{}".format(msg.as_string())

                if (MESSAGE_FROM == email_from) and \
                   (MESSAGE_BODY in email_body):
                    mail.store(str(i), "+FLAGS", "\\Deleted")
                    mail.close()
                    return OK, "BridgeDB's email responder works"
                else:
                    mail.store(str(i), "+FLAGS", "\\Deleted")

        mail.close()
    return WARNING, "No emails from BridgeDB found"


def send_email_request(password):
    """
    Attempt to send a bridge request over Gmail.
    """

    sent_from = FROM_EMAIL
    sent_to = ["{}".format(MESSAGE_FROM)]
    subject = "Bridges"
    body = "get bridges"

    email_text = """From: %s\nTo: %s\nSubject: %s\n\n%s""" % \
                 (sent_from, ", ".join(sent_to), subject, body)

    try:
        mail = smtplib.SMTP_SSL("smtp.gmail.com", 465)
        mail.login(sent_from, password)
        mail.sendmail(sent_from, sent_to, email_text)
        mail.close()
        return OK, "Sent email bridge request"
    except Exception as e:
        return UNKNOWN, str(e)


def write_status_file(status, message):
    """
    Write the given `status` and `message` to our Nagios status file.
    """

    codes = {
        0: "OK",
        1: "WARNING",
        2: "CRITICAL",
        3: "UNKNOWN"
    }
    code = codes.get(status, UNKNOWN)

    with open(STATUS_FILE, "w") as fd:
        fd.write("{}\n{}: {}".format(code, status, message))


if __name__ == "__main__":
    status, message = None, None

    # Our Gmail password should be in sys.argv[1].

    if len(sys.argv) == 2:
        password = sys.argv[1]
    else:
        write_status_file(UNKNOWN, "No email password provided")
        sys.exit(1)

    # Send an email request to BridgeDB.

    try:
        status, message = send_email_request(password)
    except Exception as e:
        write_status_file(UNKNOWN, repr(e))
        sys.exit(1)

    time.sleep(300)

    # Check if we've received an email response.

    try:
        status, message = get_email_response(password)
    except KeyboardInterrupt:
        status, message = CRITICAL, "Caught Control-C..."
    except Exception as e:
        status = CRITICAL
        message = repr(e)
    finally:
        write_status_file(status, message)
        sys.exit(status)
